/* tslint:disable */
/* eslint-disable */
/**
 * SpaceTraders API
 * SpaceTraders is an open-universe game and learning platform that offers a set of HTTP endpoints to control a fleet of ships and explore a multiplayer universe.  The API is documented using [OpenAPI](https://github.com/SpaceTradersAPI/api-docs). You can send your first request right here in your browser to check the status of the game server.  ```json http {   \"method\": \"GET\",   \"url\": \"https://api.spacetraders.io/v2\", } ```  Unlike a traditional game, SpaceTraders does not have a first-party client or app to play the game. Instead, you can use the API to build your own client, write a script to automate your ships, or try an app built by the community.  We have a [Discord channel](https://discord.com/invite/jh6zurdWk5) where you can share your projects, ask questions, and get help from other players.   
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: joel@spacetraders.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ContractTerms } from './ContractTerms';
import {
    ContractTermsFromJSON,
    ContractTermsFromJSONTyped,
    ContractTermsToJSON,
} from './ContractTerms';

/**
 * 
 * @export
 * @interface Contract
 */
export interface Contract {
    /**
     * 
     * @type {string}
     * @memberof Contract
     */
    id: string;
    /**
     * The symbol of the faction that this contract is for.
     * @type {string}
     * @memberof Contract
     */
    factionSymbol: string;
    /**
     * 
     * @type {string}
     * @memberof Contract
     */
    type: ContractTypeEnum;
    /**
     * 
     * @type {ContractTerms}
     * @memberof Contract
     */
    terms: ContractTerms;
    /**
     * Whether the contract has been accepted by the agent
     * @type {boolean}
     * @memberof Contract
     */
    accepted: boolean;
    /**
     * Whether the contract has been fulfilled
     * @type {boolean}
     * @memberof Contract
     */
    fulfilled: boolean;
    /**
     * The time at which the contract expires
     * @type {Date}
     * @memberof Contract
     */
    expiration: Date;
}


/**
 * @export
 */
export const ContractTypeEnum = {
    Procurement: 'PROCUREMENT',
    Transport: 'TRANSPORT',
    Shuttle: 'SHUTTLE'
} as const;
export type ContractTypeEnum = typeof ContractTypeEnum[keyof typeof ContractTypeEnum];


/**
 * Check if a given object implements the Contract interface.
 */
export function instanceOfContract(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "factionSymbol" in value;
    isInstance = isInstance && "type" in value;
    isInstance = isInstance && "terms" in value;
    isInstance = isInstance && "accepted" in value;
    isInstance = isInstance && "fulfilled" in value;
    isInstance = isInstance && "expiration" in value;

    return isInstance;
}

export function ContractFromJSON(json: any): Contract {
    return ContractFromJSONTyped(json, false);
}

export function ContractFromJSONTyped(json: any, ignoreDiscriminator: boolean): Contract {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'factionSymbol': json['factionSymbol'],
        'type': json['type'],
        'terms': ContractTermsFromJSON(json['terms']),
        'accepted': json['accepted'],
        'fulfilled': json['fulfilled'],
        'expiration': (new Date(json['expiration'])),
    };
}

export function ContractToJSON(value?: Contract | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'factionSymbol': value.factionSymbol,
        'type': value.type,
        'terms': ContractTermsToJSON(value.terms),
        'accepted': value.accepted,
        'fulfilled': value.fulfilled,
        'expiration': (value.expiration.toISOString()),
    };
}

