/* tslint:disable */
/* eslint-disable */
/**
 * SpaceTraders API
 * SpaceTraders is an open-universe game and learning platform that offers a set of HTTP endpoints to control a fleet of ships and explore a multiplayer universe.  The API is documented using [OpenAPI](https://github.com/SpaceTradersAPI/api-docs). You can send your first request right here in your browser to check the status of the game server.  ```json http {   \"method\": \"GET\",   \"url\": \"https://api.spacetraders.io/v2\", } ```  Unlike a traditional game, SpaceTraders does not have a first-party client or app to play the game. Instead, you can use the API to build your own client, write a script to automate your ships, or try an app built by the community.  We have a [Discord channel](https://discord.com/invite/jh6zurdWk5) where you can share your projects, ask questions, and get help from other players.   
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: joel@spacetraders.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ShipCargo } from './ShipCargo';
import {
    ShipCargoFromJSON,
    ShipCargoFromJSONTyped,
    ShipCargoToJSON,
} from './ShipCargo';
import type { ShipCrew } from './ShipCrew';
import {
    ShipCrewFromJSON,
    ShipCrewFromJSONTyped,
    ShipCrewToJSON,
} from './ShipCrew';
import type { ShipEngine } from './ShipEngine';
import {
    ShipEngineFromJSON,
    ShipEngineFromJSONTyped,
    ShipEngineToJSON,
} from './ShipEngine';
import type { ShipFrame } from './ShipFrame';
import {
    ShipFrameFromJSON,
    ShipFrameFromJSONTyped,
    ShipFrameToJSON,
} from './ShipFrame';
import type { ShipFuel } from './ShipFuel';
import {
    ShipFuelFromJSON,
    ShipFuelFromJSONTyped,
    ShipFuelToJSON,
} from './ShipFuel';
import type { ShipModule } from './ShipModule';
import {
    ShipModuleFromJSON,
    ShipModuleFromJSONTyped,
    ShipModuleToJSON,
} from './ShipModule';
import type { ShipMount } from './ShipMount';
import {
    ShipMountFromJSON,
    ShipMountFromJSONTyped,
    ShipMountToJSON,
} from './ShipMount';
import type { ShipNav } from './ShipNav';
import {
    ShipNavFromJSON,
    ShipNavFromJSONTyped,
    ShipNavToJSON,
} from './ShipNav';
import type { ShipReactor } from './ShipReactor';
import {
    ShipReactorFromJSON,
    ShipReactorFromJSONTyped,
    ShipReactorToJSON,
} from './ShipReactor';
import type { ShipRegistration } from './ShipRegistration';
import {
    ShipRegistrationFromJSON,
    ShipRegistrationFromJSONTyped,
    ShipRegistrationToJSON,
} from './ShipRegistration';

/**
 * A ship
 * @export
 * @interface Ship
 */
export interface Ship {
    /**
     * The globally unique identifier of the ship in the following format: `[AGENT_SYMBOL]_[HEX_ID]`
     * @type {string}
     * @memberof Ship
     */
    symbol: string;
    /**
     * 
     * @type {ShipRegistration}
     * @memberof Ship
     */
    registration: ShipRegistration;
    /**
     * 
     * @type {ShipNav}
     * @memberof Ship
     */
    nav: ShipNav;
    /**
     * 
     * @type {ShipCrew}
     * @memberof Ship
     */
    crew: ShipCrew;
    /**
     * 
     * @type {ShipFrame}
     * @memberof Ship
     */
    frame: ShipFrame;
    /**
     * 
     * @type {ShipReactor}
     * @memberof Ship
     */
    reactor: ShipReactor;
    /**
     * 
     * @type {ShipEngine}
     * @memberof Ship
     */
    engine: ShipEngine;
    /**
     * 
     * @type {Array<ShipModule>}
     * @memberof Ship
     */
    modules: Array<ShipModule>;
    /**
     * 
     * @type {Array<ShipMount>}
     * @memberof Ship
     */
    mounts: Array<ShipMount>;
    /**
     * 
     * @type {ShipCargo}
     * @memberof Ship
     */
    cargo: ShipCargo;
    /**
     * 
     * @type {ShipFuel}
     * @memberof Ship
     */
    fuel: ShipFuel;
}

/**
 * Check if a given object implements the Ship interface.
 */
export function instanceOfShip(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "symbol" in value;
    isInstance = isInstance && "registration" in value;
    isInstance = isInstance && "nav" in value;
    isInstance = isInstance && "crew" in value;
    isInstance = isInstance && "frame" in value;
    isInstance = isInstance && "reactor" in value;
    isInstance = isInstance && "engine" in value;
    isInstance = isInstance && "modules" in value;
    isInstance = isInstance && "mounts" in value;
    isInstance = isInstance && "cargo" in value;
    isInstance = isInstance && "fuel" in value;

    return isInstance;
}

export function ShipFromJSON(json: any): Ship {
    return ShipFromJSONTyped(json, false);
}

export function ShipFromJSONTyped(json: any, ignoreDiscriminator: boolean): Ship {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'symbol': json['symbol'],
        'registration': ShipRegistrationFromJSON(json['registration']),
        'nav': ShipNavFromJSON(json['nav']),
        'crew': ShipCrewFromJSON(json['crew']),
        'frame': ShipFrameFromJSON(json['frame']),
        'reactor': ShipReactorFromJSON(json['reactor']),
        'engine': ShipEngineFromJSON(json['engine']),
        'modules': ((json['modules'] as Array<any>).map(ShipModuleFromJSON)),
        'mounts': ((json['mounts'] as Array<any>).map(ShipMountFromJSON)),
        'cargo': ShipCargoFromJSON(json['cargo']),
        'fuel': ShipFuelFromJSON(json['fuel']),
    };
}

export function ShipToJSON(value?: Ship | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'symbol': value.symbol,
        'registration': ShipRegistrationToJSON(value.registration),
        'nav': ShipNavToJSON(value.nav),
        'crew': ShipCrewToJSON(value.crew),
        'frame': ShipFrameToJSON(value.frame),
        'reactor': ShipReactorToJSON(value.reactor),
        'engine': ShipEngineToJSON(value.engine),
        'modules': ((value.modules as Array<any>).map(ShipModuleToJSON)),
        'mounts': ((value.mounts as Array<any>).map(ShipMountToJSON)),
        'cargo': ShipCargoToJSON(value.cargo),
        'fuel': ShipFuelToJSON(value.fuel),
    };
}

