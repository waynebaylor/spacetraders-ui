/* tslint:disable */
/* eslint-disable */
/**
 * SpaceTraders API
 * SpaceTraders is an open-universe game and learning platform that offers a set of HTTP endpoints to control a fleet of ships and explore a multiplayer universe.  The API is documented using [OpenAPI](https://github.com/SpaceTradersAPI/api-docs). You can send your first request right here in your browser to check the status of the game server.  ```json http {   \"method\": \"GET\",   \"url\": \"https://api.spacetraders.io/v2\", } ```  Unlike a traditional game, SpaceTraders does not have a first-party client or app to play the game. Instead, you can use the API to build your own client, write a script to automate your ships, or try an app built by the community.  We have a [Discord channel](https://discord.com/invite/jh6zurdWk5) where you can share your projects, ask questions, and get help from other players.   
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: joel@spacetraders.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { Cooldown } from './Cooldown';
import {
    CooldownFromJSON,
    CooldownFromJSONTyped,
    CooldownToJSON,
} from './Cooldown';
import type { ShipCargo } from './ShipCargo';
import {
    ShipCargoFromJSON,
    ShipCargoFromJSONTyped,
    ShipCargoToJSON,
} from './ShipCargo';
import type { ShipRefine200ResponseDataProducedInner } from './ShipRefine200ResponseDataProducedInner';
import {
    ShipRefine200ResponseDataProducedInnerFromJSON,
    ShipRefine200ResponseDataProducedInnerFromJSONTyped,
    ShipRefine200ResponseDataProducedInnerToJSON,
} from './ShipRefine200ResponseDataProducedInner';

/**
 * 
 * @export
 * @interface ShipRefine200ResponseData
 */
export interface ShipRefine200ResponseData {
    /**
     * 
     * @type {ShipCargo}
     * @memberof ShipRefine200ResponseData
     */
    cargo: ShipCargo;
    /**
     * 
     * @type {Cooldown}
     * @memberof ShipRefine200ResponseData
     */
    cooldown: Cooldown;
    /**
     * 
     * @type {Array<ShipRefine200ResponseDataProducedInner>}
     * @memberof ShipRefine200ResponseData
     */
    produced: Array<ShipRefine200ResponseDataProducedInner>;
    /**
     * 
     * @type {Array<ShipRefine200ResponseDataProducedInner>}
     * @memberof ShipRefine200ResponseData
     */
    consumed: Array<ShipRefine200ResponseDataProducedInner>;
}

/**
 * Check if a given object implements the ShipRefine200ResponseData interface.
 */
export function instanceOfShipRefine200ResponseData(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "cargo" in value;
    isInstance = isInstance && "cooldown" in value;
    isInstance = isInstance && "produced" in value;
    isInstance = isInstance && "consumed" in value;

    return isInstance;
}

export function ShipRefine200ResponseDataFromJSON(json: any): ShipRefine200ResponseData {
    return ShipRefine200ResponseDataFromJSONTyped(json, false);
}

export function ShipRefine200ResponseDataFromJSONTyped(json: any, ignoreDiscriminator: boolean): ShipRefine200ResponseData {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'cargo': ShipCargoFromJSON(json['cargo']),
        'cooldown': CooldownFromJSON(json['cooldown']),
        'produced': ((json['produced'] as Array<any>).map(ShipRefine200ResponseDataProducedInnerFromJSON)),
        'consumed': ((json['consumed'] as Array<any>).map(ShipRefine200ResponseDataProducedInnerFromJSON)),
    };
}

export function ShipRefine200ResponseDataToJSON(value?: ShipRefine200ResponseData | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'cargo': ShipCargoToJSON(value.cargo),
        'cooldown': CooldownToJSON(value.cooldown),
        'produced': ((value.produced as Array<any>).map(ShipRefine200ResponseDataProducedInnerToJSON)),
        'consumed': ((value.consumed as Array<any>).map(ShipRefine200ResponseDataProducedInnerToJSON)),
    };
}

