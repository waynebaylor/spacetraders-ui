/* tslint:disable */
/* eslint-disable */
/**
 * SpaceTraders API
 * SpaceTraders is an open-universe game and learning platform that offers a set of HTTP endpoints to control a fleet of ships and explore a multiplayer universe.  The API is documented using [OpenAPI](https://github.com/SpaceTradersAPI/api-docs). You can send your first request right here in your browser to check the status of the game server.  ```json http {   \"method\": \"GET\",   \"url\": \"https://api.spacetraders.io/v2\", } ```  Unlike a traditional game, SpaceTraders does not have a first-party client or app to play the game. Instead, you can use the API to build your own client, write a script to automate your ships, or try an app built by the community.  We have a [Discord channel](https://discord.com/invite/jh6zurdWk5) where you can share your projects, ask questions, and get help from other players.   
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: joel@spacetraders.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateChart201Response,
  CreateShipShipScan201Response,
  CreateShipSystemScan201Response,
  CreateShipWaypointScan201Response,
  CreateSurvey201Response,
  DockShip200Response,
  ExtractResources201Response,
  ExtractResourcesRequest,
  GetMyShip200Response,
  GetMyShipCargo200Response,
  GetMyShips200Response,
  GetShipCooldown200Response,
  GetShipNav200Response,
  Jettison200Response,
  JettisonRequest,
  JumpShip200Response,
  JumpShipRequest,
  NavigateShip200Response,
  NavigateShipRequest,
  OrbitShip200Response,
  PatchShipNavRequest,
  PurchaseCargo201Response,
  PurchaseCargoRequest,
  PurchaseShip201Response,
  PurchaseShipRequest,
  RefuelShip200Response,
  SellCargo201Response,
  SellCargoRequest,
  ShipRefine200Response,
  ShipRefineRequest,
  TransferCargo200Response,
  TransferCargoRequest,
} from '../models';
import {
    CreateChart201ResponseFromJSON,
    CreateChart201ResponseToJSON,
    CreateShipShipScan201ResponseFromJSON,
    CreateShipShipScan201ResponseToJSON,
    CreateShipSystemScan201ResponseFromJSON,
    CreateShipSystemScan201ResponseToJSON,
    CreateShipWaypointScan201ResponseFromJSON,
    CreateShipWaypointScan201ResponseToJSON,
    CreateSurvey201ResponseFromJSON,
    CreateSurvey201ResponseToJSON,
    DockShip200ResponseFromJSON,
    DockShip200ResponseToJSON,
    ExtractResources201ResponseFromJSON,
    ExtractResources201ResponseToJSON,
    ExtractResourcesRequestFromJSON,
    ExtractResourcesRequestToJSON,
    GetMyShip200ResponseFromJSON,
    GetMyShip200ResponseToJSON,
    GetMyShipCargo200ResponseFromJSON,
    GetMyShipCargo200ResponseToJSON,
    GetMyShips200ResponseFromJSON,
    GetMyShips200ResponseToJSON,
    GetShipCooldown200ResponseFromJSON,
    GetShipCooldown200ResponseToJSON,
    GetShipNav200ResponseFromJSON,
    GetShipNav200ResponseToJSON,
    Jettison200ResponseFromJSON,
    Jettison200ResponseToJSON,
    JettisonRequestFromJSON,
    JettisonRequestToJSON,
    JumpShip200ResponseFromJSON,
    JumpShip200ResponseToJSON,
    JumpShipRequestFromJSON,
    JumpShipRequestToJSON,
    NavigateShip200ResponseFromJSON,
    NavigateShip200ResponseToJSON,
    NavigateShipRequestFromJSON,
    NavigateShipRequestToJSON,
    OrbitShip200ResponseFromJSON,
    OrbitShip200ResponseToJSON,
    PatchShipNavRequestFromJSON,
    PatchShipNavRequestToJSON,
    PurchaseCargo201ResponseFromJSON,
    PurchaseCargo201ResponseToJSON,
    PurchaseCargoRequestFromJSON,
    PurchaseCargoRequestToJSON,
    PurchaseShip201ResponseFromJSON,
    PurchaseShip201ResponseToJSON,
    PurchaseShipRequestFromJSON,
    PurchaseShipRequestToJSON,
    RefuelShip200ResponseFromJSON,
    RefuelShip200ResponseToJSON,
    SellCargo201ResponseFromJSON,
    SellCargo201ResponseToJSON,
    SellCargoRequestFromJSON,
    SellCargoRequestToJSON,
    ShipRefine200ResponseFromJSON,
    ShipRefine200ResponseToJSON,
    ShipRefineRequestFromJSON,
    ShipRefineRequestToJSON,
    TransferCargo200ResponseFromJSON,
    TransferCargo200ResponseToJSON,
    TransferCargoRequestFromJSON,
    TransferCargoRequestToJSON,
} from '../models';

export interface CreateChartRequest {
    shipSymbol: string;
}

export interface CreateShipShipScanRequest {
    shipSymbol: string;
}

export interface CreateShipSystemScanRequest {
    shipSymbol: string;
}

export interface CreateShipWaypointScanRequest {
    shipSymbol: string;
}

export interface CreateSurveyRequest {
    shipSymbol: string;
}

export interface DockShipRequest {
    shipSymbol: string;
}

export interface ExtractResourcesOperationRequest {
    shipSymbol: string;
    extractResourcesRequest?: ExtractResourcesRequest;
}

export interface GetMyShipRequest {
    shipSymbol: string;
}

export interface GetMyShipCargoRequest {
    shipSymbol: string;
}

export interface GetMyShipsRequest {
    page?: number;
    limit?: number;
}

export interface GetShipCooldownRequest {
    shipSymbol: string;
}

export interface GetShipNavRequest {
    shipSymbol: string;
}

export interface JettisonOperationRequest {
    shipSymbol: string;
    jettisonRequest?: JettisonRequest;
}

export interface JumpShipOperationRequest {
    shipSymbol: string;
    jumpShipRequest?: JumpShipRequest;
}

export interface NavigateShipOperationRequest {
    shipSymbol: string;
    navigateShipRequest?: NavigateShipRequest;
}

export interface OrbitShipRequest {
    shipSymbol: string;
}

export interface PatchShipNavOperationRequest {
    shipSymbol: string;
    patchShipNavRequest?: PatchShipNavRequest;
}

export interface PurchaseCargoOperationRequest {
    shipSymbol: string;
    purchaseCargoRequest?: PurchaseCargoRequest;
}

export interface PurchaseShipOperationRequest {
    purchaseShipRequest?: PurchaseShipRequest;
}

export interface RefuelShipRequest {
    shipSymbol: string;
}

export interface SellCargoOperationRequest {
    shipSymbol: string;
    sellCargoRequest?: SellCargoRequest;
}

export interface ShipRefineOperationRequest {
    shipSymbol: string;
    shipRefineRequest?: ShipRefineRequest;
}

export interface TransferCargoOperationRequest {
    shipSymbol: string;
    transferCargoRequest?: TransferCargoRequest;
}

export interface WarpShipRequest {
    shipSymbol: string;
    navigateShipRequest?: NavigateShipRequest;
}

/**
 * 
 */
export class FleetApi extends runtime.BaseAPI {

    /**
     * Command a ship to chart the current waypoint.  Waypoints in the universe are uncharted by default. These locations will not show up in the API until they have been charted by a ship.  Charting a location will record your agent as the one who created the chart.
     * Create Chart
     */
    async createChartRaw(requestParameters: CreateChartRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateChart201Response>> {
        if (requestParameters.shipSymbol === null || requestParameters.shipSymbol === undefined) {
            throw new runtime.RequiredError('shipSymbol','Required parameter requestParameters.shipSymbol was null or undefined when calling createChart.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("AgentToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/my/ships/{shipSymbol}/chart`.replace(`{${"shipSymbol"}}`, encodeURIComponent(String(requestParameters.shipSymbol))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateChart201ResponseFromJSON(jsonValue));
    }

    /**
     * Command a ship to chart the current waypoint.  Waypoints in the universe are uncharted by default. These locations will not show up in the API until they have been charted by a ship.  Charting a location will record your agent as the one who created the chart.
     * Create Chart
     */
    async createChart(requestParameters: CreateChartRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateChart201Response> {
        const response = await this.createChartRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Activate your ship\'s sensor arrays to scan for ship information.
     * Scan Ships
     */
    async createShipShipScanRaw(requestParameters: CreateShipShipScanRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateShipShipScan201Response>> {
        if (requestParameters.shipSymbol === null || requestParameters.shipSymbol === undefined) {
            throw new runtime.RequiredError('shipSymbol','Required parameter requestParameters.shipSymbol was null or undefined when calling createShipShipScan.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("AgentToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/my/ships/{shipSymbol}/scan/ships`.replace(`{${"shipSymbol"}}`, encodeURIComponent(String(requestParameters.shipSymbol))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateShipShipScan201ResponseFromJSON(jsonValue));
    }

    /**
     * Activate your ship\'s sensor arrays to scan for ship information.
     * Scan Ships
     */
    async createShipShipScan(requestParameters: CreateShipShipScanRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateShipShipScan201Response> {
        const response = await this.createShipShipScanRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Activate your ship\'s sensor arrays to scan for system information.
     * Scan Systems
     */
    async createShipSystemScanRaw(requestParameters: CreateShipSystemScanRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateShipSystemScan201Response>> {
        if (requestParameters.shipSymbol === null || requestParameters.shipSymbol === undefined) {
            throw new runtime.RequiredError('shipSymbol','Required parameter requestParameters.shipSymbol was null or undefined when calling createShipSystemScan.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("AgentToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/my/ships/{shipSymbol}/scan/systems`.replace(`{${"shipSymbol"}}`, encodeURIComponent(String(requestParameters.shipSymbol))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateShipSystemScan201ResponseFromJSON(jsonValue));
    }

    /**
     * Activate your ship\'s sensor arrays to scan for system information.
     * Scan Systems
     */
    async createShipSystemScan(requestParameters: CreateShipSystemScanRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateShipSystemScan201Response> {
        const response = await this.createShipSystemScanRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Activate your ship\'s sensor arrays to scan for waypoint information.
     * Scan Waypoints
     */
    async createShipWaypointScanRaw(requestParameters: CreateShipWaypointScanRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateShipWaypointScan201Response>> {
        if (requestParameters.shipSymbol === null || requestParameters.shipSymbol === undefined) {
            throw new runtime.RequiredError('shipSymbol','Required parameter requestParameters.shipSymbol was null or undefined when calling createShipWaypointScan.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("AgentToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/my/ships/{shipSymbol}/scan/waypoints`.replace(`{${"shipSymbol"}}`, encodeURIComponent(String(requestParameters.shipSymbol))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateShipWaypointScan201ResponseFromJSON(jsonValue));
    }

    /**
     * Activate your ship\'s sensor arrays to scan for waypoint information.
     * Scan Waypoints
     */
    async createShipWaypointScan(requestParameters: CreateShipWaypointScanRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateShipWaypointScan201Response> {
        const response = await this.createShipWaypointScanRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * If you want to target specific yields for an extraction, you can survey a waypoint, such as an asteroid field, and send the survey in the body of the extract request. Each survey may have multiple deposits, and if a symbol shows up more than once, that indicates a higher chance of extracting that resource.  Your ship will enter a cooldown between consecutive survey requests. Surveys will eventually expire after a period of time. Multiple ships can use the same survey for extraction.
     * Create Survey
     */
    async createSurveyRaw(requestParameters: CreateSurveyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateSurvey201Response>> {
        if (requestParameters.shipSymbol === null || requestParameters.shipSymbol === undefined) {
            throw new runtime.RequiredError('shipSymbol','Required parameter requestParameters.shipSymbol was null or undefined when calling createSurvey.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("AgentToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/my/ships/{shipSymbol}/survey`.replace(`{${"shipSymbol"}}`, encodeURIComponent(String(requestParameters.shipSymbol))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateSurvey201ResponseFromJSON(jsonValue));
    }

    /**
     * If you want to target specific yields for an extraction, you can survey a waypoint, such as an asteroid field, and send the survey in the body of the extract request. Each survey may have multiple deposits, and if a symbol shows up more than once, that indicates a higher chance of extracting that resource.  Your ship will enter a cooldown between consecutive survey requests. Surveys will eventually expire after a period of time. Multiple ships can use the same survey for extraction.
     * Create Survey
     */
    async createSurvey(requestParameters: CreateSurveyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateSurvey201Response> {
        const response = await this.createSurveyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Attempt to dock your ship at it\'s current location. Docking will only succeed if the waypoint is a dockable location, and your ship is capable of docking at the time of the request.  The endpoint is idempotent - successive calls will succeed even if the ship is already docked.
     * Dock Ship
     */
    async dockShipRaw(requestParameters: DockShipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DockShip200Response>> {
        if (requestParameters.shipSymbol === null || requestParameters.shipSymbol === undefined) {
            throw new runtime.RequiredError('shipSymbol','Required parameter requestParameters.shipSymbol was null or undefined when calling dockShip.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("AgentToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/my/ships/{shipSymbol}/dock`.replace(`{${"shipSymbol"}}`, encodeURIComponent(String(requestParameters.shipSymbol))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DockShip200ResponseFromJSON(jsonValue));
    }

    /**
     * Attempt to dock your ship at it\'s current location. Docking will only succeed if the waypoint is a dockable location, and your ship is capable of docking at the time of the request.  The endpoint is idempotent - successive calls will succeed even if the ship is already docked.
     * Dock Ship
     */
    async dockShip(requestParameters: DockShipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DockShip200Response> {
        const response = await this.dockShipRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Extract resources from the waypoint into your ship. Send an optional survey as the payload to target specific yields.
     * Extract Resources
     */
    async extractResourcesRaw(requestParameters: ExtractResourcesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ExtractResources201Response>> {
        if (requestParameters.shipSymbol === null || requestParameters.shipSymbol === undefined) {
            throw new runtime.RequiredError('shipSymbol','Required parameter requestParameters.shipSymbol was null or undefined when calling extractResources.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("AgentToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/my/ships/{shipSymbol}/extract`.replace(`{${"shipSymbol"}}`, encodeURIComponent(String(requestParameters.shipSymbol))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ExtractResourcesRequestToJSON(requestParameters.extractResourcesRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ExtractResources201ResponseFromJSON(jsonValue));
    }

    /**
     * Extract resources from the waypoint into your ship. Send an optional survey as the payload to target specific yields.
     * Extract Resources
     */
    async extractResources(requestParameters: ExtractResourcesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ExtractResources201Response> {
        const response = await this.extractResourcesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve the details of your ship.
     * Get Ship
     */
    async getMyShipRaw(requestParameters: GetMyShipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetMyShip200Response>> {
        if (requestParameters.shipSymbol === null || requestParameters.shipSymbol === undefined) {
            throw new runtime.RequiredError('shipSymbol','Required parameter requestParameters.shipSymbol was null or undefined when calling getMyShip.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("AgentToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/my/ships/{shipSymbol}`.replace(`{${"shipSymbol"}}`, encodeURIComponent(String(requestParameters.shipSymbol))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetMyShip200ResponseFromJSON(jsonValue));
    }

    /**
     * Retrieve the details of your ship.
     * Get Ship
     */
    async getMyShip(requestParameters: GetMyShipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetMyShip200Response> {
        const response = await this.getMyShipRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve the cargo of your ship.
     * Get Ship Cargo
     */
    async getMyShipCargoRaw(requestParameters: GetMyShipCargoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetMyShipCargo200Response>> {
        if (requestParameters.shipSymbol === null || requestParameters.shipSymbol === undefined) {
            throw new runtime.RequiredError('shipSymbol','Required parameter requestParameters.shipSymbol was null or undefined when calling getMyShipCargo.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("AgentToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/my/ships/{shipSymbol}/cargo`.replace(`{${"shipSymbol"}}`, encodeURIComponent(String(requestParameters.shipSymbol))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetMyShipCargo200ResponseFromJSON(jsonValue));
    }

    /**
     * Retrieve the cargo of your ship.
     * Get Ship Cargo
     */
    async getMyShipCargo(requestParameters: GetMyShipCargoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetMyShipCargo200Response> {
        const response = await this.getMyShipCargoRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve all of your ships.
     * List Ships
     */
    async getMyShipsRaw(requestParameters: GetMyShipsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetMyShips200Response>> {
        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("AgentToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/my/ships`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetMyShips200ResponseFromJSON(jsonValue));
    }

    /**
     * Retrieve all of your ships.
     * List Ships
     */
    async getMyShips(requestParameters: GetMyShipsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetMyShips200Response> {
        const response = await this.getMyShipsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve the details of your ship\'s reactor cooldown. Some actions such as activating your jump drive, scanning, or extracting resources taxes your reactor and results in a cooldown.  Your ship cannot perform additional actions until your cooldown has expired. The duration of your cooldown is relative to the power consumption of the related modules or mounts for the action taken.  Response returns a 204 status code (no-content) when the ship has no cooldown.
     * Get Ship Cooldown
     */
    async getShipCooldownRaw(requestParameters: GetShipCooldownRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetShipCooldown200Response>> {
        if (requestParameters.shipSymbol === null || requestParameters.shipSymbol === undefined) {
            throw new runtime.RequiredError('shipSymbol','Required parameter requestParameters.shipSymbol was null or undefined when calling getShipCooldown.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("AgentToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/my/ships/{shipSymbol}/cooldown`.replace(`{${"shipSymbol"}}`, encodeURIComponent(String(requestParameters.shipSymbol))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetShipCooldown200ResponseFromJSON(jsonValue));
    }

    /**
     * Retrieve the details of your ship\'s reactor cooldown. Some actions such as activating your jump drive, scanning, or extracting resources taxes your reactor and results in a cooldown.  Your ship cannot perform additional actions until your cooldown has expired. The duration of your cooldown is relative to the power consumption of the related modules or mounts for the action taken.  Response returns a 204 status code (no-content) when the ship has no cooldown.
     * Get Ship Cooldown
     */
    async getShipCooldown(requestParameters: GetShipCooldownRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetShipCooldown200Response> {
        const response = await this.getShipCooldownRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get the current nav status of a ship.
     * Get Ship Nav
     */
    async getShipNavRaw(requestParameters: GetShipNavRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetShipNav200Response>> {
        if (requestParameters.shipSymbol === null || requestParameters.shipSymbol === undefined) {
            throw new runtime.RequiredError('shipSymbol','Required parameter requestParameters.shipSymbol was null or undefined when calling getShipNav.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("AgentToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/my/ships/{shipSymbol}/nav`.replace(`{${"shipSymbol"}}`, encodeURIComponent(String(requestParameters.shipSymbol))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetShipNav200ResponseFromJSON(jsonValue));
    }

    /**
     * Get the current nav status of a ship.
     * Get Ship Nav
     */
    async getShipNav(requestParameters: GetShipNavRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetShipNav200Response> {
        const response = await this.getShipNavRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Jettison cargo from your ship\'s cargo hold.
     * Jettison Cargo
     */
    async jettisonRaw(requestParameters: JettisonOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Jettison200Response>> {
        if (requestParameters.shipSymbol === null || requestParameters.shipSymbol === undefined) {
            throw new runtime.RequiredError('shipSymbol','Required parameter requestParameters.shipSymbol was null or undefined when calling jettison.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("AgentToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/my/ships/{shipSymbol}/jettison`.replace(`{${"shipSymbol"}}`, encodeURIComponent(String(requestParameters.shipSymbol))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: JettisonRequestToJSON(requestParameters.jettisonRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => Jettison200ResponseFromJSON(jsonValue));
    }

    /**
     * Jettison cargo from your ship\'s cargo hold.
     * Jettison Cargo
     */
    async jettison(requestParameters: JettisonOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Jettison200Response> {
        const response = await this.jettisonRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Jump your ship instantly to a target system. Unlike other forms of navigation, jumping requires a unit of antimatter.
     * Jump Ship
     */
    async jumpShipRaw(requestParameters: JumpShipOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<JumpShip200Response>> {
        if (requestParameters.shipSymbol === null || requestParameters.shipSymbol === undefined) {
            throw new runtime.RequiredError('shipSymbol','Required parameter requestParameters.shipSymbol was null or undefined when calling jumpShip.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("AgentToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/my/ships/{shipSymbol}/jump`.replace(`{${"shipSymbol"}}`, encodeURIComponent(String(requestParameters.shipSymbol))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: JumpShipRequestToJSON(requestParameters.jumpShipRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => JumpShip200ResponseFromJSON(jsonValue));
    }

    /**
     * Jump your ship instantly to a target system. Unlike other forms of navigation, jumping requires a unit of antimatter.
     * Jump Ship
     */
    async jumpShip(requestParameters: JumpShipOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<JumpShip200Response> {
        const response = await this.jumpShipRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Navigate to a target destination. The destination must be located within the same system as the ship. Navigating will consume the necessary fuel and supplies from the ship\'s manifest, and will pay out crew wages from the agent\'s account.  The returned response will detail the route information including the expected time of arrival. Most ship actions are unavailable until the ship has arrived at it\'s destination.  To travel between systems, see the ship\'s warp or jump actions.
     * Navigate Ship
     */
    async navigateShipRaw(requestParameters: NavigateShipOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<NavigateShip200Response>> {
        if (requestParameters.shipSymbol === null || requestParameters.shipSymbol === undefined) {
            throw new runtime.RequiredError('shipSymbol','Required parameter requestParameters.shipSymbol was null or undefined when calling navigateShip.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("AgentToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/my/ships/{shipSymbol}/navigate`.replace(`{${"shipSymbol"}}`, encodeURIComponent(String(requestParameters.shipSymbol))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: NavigateShipRequestToJSON(requestParameters.navigateShipRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => NavigateShip200ResponseFromJSON(jsonValue));
    }

    /**
     * Navigate to a target destination. The destination must be located within the same system as the ship. Navigating will consume the necessary fuel and supplies from the ship\'s manifest, and will pay out crew wages from the agent\'s account.  The returned response will detail the route information including the expected time of arrival. Most ship actions are unavailable until the ship has arrived at it\'s destination.  To travel between systems, see the ship\'s warp or jump actions.
     * Navigate Ship
     */
    async navigateShip(requestParameters: NavigateShipOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<NavigateShip200Response> {
        const response = await this.navigateShipRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Attempt to move your ship into orbit at it\'s current location. The request will only succeed if your ship is capable of moving into orbit at the time of the request.  The endpoint is idempotent - successive calls will succeed even if the ship is already in orbit.
     * Orbit Ship
     */
    async orbitShipRaw(requestParameters: OrbitShipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrbitShip200Response>> {
        if (requestParameters.shipSymbol === null || requestParameters.shipSymbol === undefined) {
            throw new runtime.RequiredError('shipSymbol','Required parameter requestParameters.shipSymbol was null or undefined when calling orbitShip.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("AgentToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/my/ships/{shipSymbol}/orbit`.replace(`{${"shipSymbol"}}`, encodeURIComponent(String(requestParameters.shipSymbol))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrbitShip200ResponseFromJSON(jsonValue));
    }

    /**
     * Attempt to move your ship into orbit at it\'s current location. The request will only succeed if your ship is capable of moving into orbit at the time of the request.  The endpoint is idempotent - successive calls will succeed even if the ship is already in orbit.
     * Orbit Ship
     */
    async orbitShip(requestParameters: OrbitShipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrbitShip200Response> {
        const response = await this.orbitShipRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update the nav data of a ship, such as the flight mode.
     * Patch Ship Nav
     */
    async patchShipNavRaw(requestParameters: PatchShipNavOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetShipNav200Response>> {
        if (requestParameters.shipSymbol === null || requestParameters.shipSymbol === undefined) {
            throw new runtime.RequiredError('shipSymbol','Required parameter requestParameters.shipSymbol was null or undefined when calling patchShipNav.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("AgentToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/my/ships/{shipSymbol}/nav`.replace(`{${"shipSymbol"}}`, encodeURIComponent(String(requestParameters.shipSymbol))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchShipNavRequestToJSON(requestParameters.patchShipNavRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetShipNav200ResponseFromJSON(jsonValue));
    }

    /**
     * Update the nav data of a ship, such as the flight mode.
     * Patch Ship Nav
     */
    async patchShipNav(requestParameters: PatchShipNavOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetShipNav200Response> {
        const response = await this.patchShipNavRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Purchase cargo.
     * Purchase Cargo
     */
    async purchaseCargoRaw(requestParameters: PurchaseCargoOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PurchaseCargo201Response>> {
        if (requestParameters.shipSymbol === null || requestParameters.shipSymbol === undefined) {
            throw new runtime.RequiredError('shipSymbol','Required parameter requestParameters.shipSymbol was null or undefined when calling purchaseCargo.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("AgentToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/my/ships/{shipSymbol}/purchase`.replace(`{${"shipSymbol"}}`, encodeURIComponent(String(requestParameters.shipSymbol))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PurchaseCargoRequestToJSON(requestParameters.purchaseCargoRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PurchaseCargo201ResponseFromJSON(jsonValue));
    }

    /**
     * Purchase cargo.
     * Purchase Cargo
     */
    async purchaseCargo(requestParameters: PurchaseCargoOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PurchaseCargo201Response> {
        const response = await this.purchaseCargoRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Purchase a ship
     * Purchase Ship
     */
    async purchaseShipRaw(requestParameters: PurchaseShipOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PurchaseShip201Response>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("AgentToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/my/ships`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PurchaseShipRequestToJSON(requestParameters.purchaseShipRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PurchaseShip201ResponseFromJSON(jsonValue));
    }

    /**
     * Purchase a ship
     * Purchase Ship
     */
    async purchaseShip(requestParameters: PurchaseShipOperationRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PurchaseShip201Response> {
        const response = await this.purchaseShipRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Refuel your ship from the local market.
     * Refuel Ship
     */
    async refuelShipRaw(requestParameters: RefuelShipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RefuelShip200Response>> {
        if (requestParameters.shipSymbol === null || requestParameters.shipSymbol === undefined) {
            throw new runtime.RequiredError('shipSymbol','Required parameter requestParameters.shipSymbol was null or undefined when calling refuelShip.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("AgentToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/my/ships/{shipSymbol}/refuel`.replace(`{${"shipSymbol"}}`, encodeURIComponent(String(requestParameters.shipSymbol))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RefuelShip200ResponseFromJSON(jsonValue));
    }

    /**
     * Refuel your ship from the local market.
     * Refuel Ship
     */
    async refuelShip(requestParameters: RefuelShipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RefuelShip200Response> {
        const response = await this.refuelShipRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Sell cargo.
     * Sell Cargo
     */
    async sellCargoRaw(requestParameters: SellCargoOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SellCargo201Response>> {
        if (requestParameters.shipSymbol === null || requestParameters.shipSymbol === undefined) {
            throw new runtime.RequiredError('shipSymbol','Required parameter requestParameters.shipSymbol was null or undefined when calling sellCargo.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("AgentToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/my/ships/{shipSymbol}/sell`.replace(`{${"shipSymbol"}}`, encodeURIComponent(String(requestParameters.shipSymbol))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SellCargoRequestToJSON(requestParameters.sellCargoRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SellCargo201ResponseFromJSON(jsonValue));
    }

    /**
     * Sell cargo.
     * Sell Cargo
     */
    async sellCargo(requestParameters: SellCargoOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SellCargo201Response> {
        const response = await this.sellCargoRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Attempt to refine the raw materials on your ship. The request will only succeed if your ship is capable of refining at the time of the request.
     * Ship Refine
     */
    async shipRefineRaw(requestParameters: ShipRefineOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ShipRefine200Response>> {
        if (requestParameters.shipSymbol === null || requestParameters.shipSymbol === undefined) {
            throw new runtime.RequiredError('shipSymbol','Required parameter requestParameters.shipSymbol was null or undefined when calling shipRefine.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("AgentToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/my/ships/{shipSymbol}/refine`.replace(`{${"shipSymbol"}}`, encodeURIComponent(String(requestParameters.shipSymbol))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ShipRefineRequestToJSON(requestParameters.shipRefineRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ShipRefine200ResponseFromJSON(jsonValue));
    }

    /**
     * Attempt to refine the raw materials on your ship. The request will only succeed if your ship is capable of refining at the time of the request.
     * Ship Refine
     */
    async shipRefine(requestParameters: ShipRefineOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ShipRefine200Response> {
        const response = await this.shipRefineRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Transfer cargo between ships.
     * Transfer Cargo
     */
    async transferCargoRaw(requestParameters: TransferCargoOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TransferCargo200Response>> {
        if (requestParameters.shipSymbol === null || requestParameters.shipSymbol === undefined) {
            throw new runtime.RequiredError('shipSymbol','Required parameter requestParameters.shipSymbol was null or undefined when calling transferCargo.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("AgentToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/my/ships/{shipSymbol}/transfer`.replace(`{${"shipSymbol"}}`, encodeURIComponent(String(requestParameters.shipSymbol))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TransferCargoRequestToJSON(requestParameters.transferCargoRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TransferCargo200ResponseFromJSON(jsonValue));
    }

    /**
     * Transfer cargo between ships.
     * Transfer Cargo
     */
    async transferCargo(requestParameters: TransferCargoOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TransferCargo200Response> {
        const response = await this.transferCargoRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Warp your ship to a target destination in another system. Warping will consume the necessary fuel and supplies from the ship\'s manifest, and will pay out crew wages from the agent\'s account.  The returned response will detail the route information including the expected time of arrival. Most ship actions are unavailable until the ship has arrived at it\'s destination.
     * Warp Ship
     */
    async warpShipRaw(requestParameters: WarpShipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<NavigateShip200Response>> {
        if (requestParameters.shipSymbol === null || requestParameters.shipSymbol === undefined) {
            throw new runtime.RequiredError('shipSymbol','Required parameter requestParameters.shipSymbol was null or undefined when calling warpShip.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("AgentToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/my/ships/{shipSymbol}/warp`.replace(`{${"shipSymbol"}}`, encodeURIComponent(String(requestParameters.shipSymbol))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: NavigateShipRequestToJSON(requestParameters.navigateShipRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => NavigateShip200ResponseFromJSON(jsonValue));
    }

    /**
     * Warp your ship to a target destination in another system. Warping will consume the necessary fuel and supplies from the ship\'s manifest, and will pay out crew wages from the agent\'s account.  The returned response will detail the route information including the expected time of arrival. Most ship actions are unavailable until the ship has arrived at it\'s destination.
     * Warp Ship
     */
    async warpShip(requestParameters: WarpShipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<NavigateShip200Response> {
        const response = await this.warpShipRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
